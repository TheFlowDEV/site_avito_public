# Generated by Django 5.0.4 on 2024-05-10 06:00

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adverstiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.IntegerField(validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(1)])),
                ('text', models.TextField()),
                ('main_name', models.TextField()),
                ('category', models.TextField()),
                ('is_active', models.BooleanField()),
                ('datetime', models.DateTimeField()),
                ('sold_by_user_id', models.IntegerField()),
                ('order_image_list', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Head', models.TextField()),
                ('Body', models.TextField()),
                ('Read', models.BooleanField(default=False)),
                ('Timestamp', models.DateTimeField()),
                ('Url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.TextField(unique=True)),
                ('university', models.TextField()),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('recommendations', models.JSONField(default=users.models.empty_recs)),
                ('ban_list', models.ManyToManyField(blank=True, related_name='ban_set', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('subscriptions', models.ManyToManyField(blank=True, related_name='subscriptions_set', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('history', models.ManyToManyField(blank=True, related_name='click_history', to='users.adverstiment')),
                ('related_adverstiments', models.ManyToManyField(blank=True, related_name='related_adverstiments', to='users.adverstiment')),
                ('user_adverstiments', models.ManyToManyField(blank=True, related_name='user_advs', to='users.adverstiment')),
                ('user_buys', models.ManyToManyField(blank=True, related_name='user_buys', to='users.adverstiment')),
                ('notifications', models.ManyToManyField(blank=True, to='users.notification')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OAuth2Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('access_token', models.TextField()),
                ('token_type', models.TextField()),
                ('refresh_token', models.TextField()),
                ('expires_at', models.PositiveIntegerField()),
                ('oauth_id', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0)),
                ('text', models.TextField(default='')),
                ('wrote_by', models.TextField(default='1')),
                ('adverstiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.adverstiment')),
            ],
        ),
        migrations.AddField(
            model_name='myuser',
            name='reviews',
            field=models.ManyToManyField(blank=True, to='users.review'),
        ),
    ]
